---
- name: Deploy Frontend Next.js (produção)
  hosts: frontend
  become: true

  vars:
    app_dir: /home/ubuntu/frontend
    repo_url: https://github.com/wbrunovieira/revalidaItaliaFrontNext.git
    aws_region: "{{ aws_region | default('us-east-2') }}"

  tasks:
    - name: Ensure {{ app_dir }} exists
      file:
        path: '{{ app_dir }}'
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Wait for apt to be available (lock released)
      shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for other apt processes to finish...";
          sleep 3;
        done
      changed_when: false

    - name: Update apt and install base packages
      apt:
        update_cache: yes
        name:
          - curl
          - git
          - build-essential
          - python3
          - python3-apt
        state: present

    - name: Install Node.js & npm (NodeSource)
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        apt-get install -y nodejs
      args:
        executable: /bin/bash

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present

    - name: Remove existing repo directory
      file:
        path: '{{ app_dir }}'
        state: absent
      become_user: ubuntu

    - name: Clone fresh repo
      git:
        repo: '{{ repo_url }}'
        dest: '{{ app_dir }}'
        version: main
        force: yes
      become_user: ubuntu

    - name: Debug NEXT_PUBLIC_API_URL antes de gerar .env
      debug:
        msg: 'NEXT_PUBLIC_API_URL={{ NEXT_PUBLIC_API_URL }}'

    - name: Generate .env for Next.js
      template:
        src: 'templates/.env.prod.j2'
        dest: '{{ app_dir }}/.env'
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      become_user: ubuntu


    - name: Show generated .env
      command: cat {{ app_dir }}/.env
      register: env_prod
      become_user: ubuntu

    - name: Debug conteúdo de .env
      debug:
        var: env_prod.stdout_lines

    - name: Stop and delete PM2 process if exists
      shell: |
        pm2 delete frontend || true
        pm2 flush
      args:
        chdir: '{{ app_dir }}'
      become_user: ubuntu

    - name:
        Force kill any process using port 3000 (even
        orphaned)
      shell: |
        fuser -k 3000/tcp || true
      become_user: ubuntu
      ignore_errors: yes

    - name: Wait until port 3000 is free
      shell: |
        while fuser 3000/tcp >/dev/null 2>&1; do
          echo "Port 3000 still in use... waiting.";
          sleep 2;
        done
      changed_when: false
      become_user: ubuntu

    - name: Install project dependencies
      command: npm install
      args:
        chdir: '{{ app_dir }}'
      become_user: ubuntu

    - name: Build project
      command: npm run build
      args:
        chdir: '{{ app_dir }}'
      become_user: ubuntu

    - name: Install Nginx and SSL tools
      apt:
        name:
          - nginx
          - certbot
          - python3-certbot-nginx
          - openssl
        state: present
        update_cache: yes

    - name: Create SSL directory
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0755'

    - name: Generate self-signed SSL certificate for Cloudflare
      command: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/nginx/ssl/portalrevalida.com.key \
        -out /etc/nginx/ssl/portalrevalida.com.crt \
        -subj "/C=BR/ST=SP/L=SaoPaulo/O=RevalidaItalia/CN=portalrevalida.com"
      args:
        creates: /etc/nginx/ssl/portalrevalida.com.crt

    - name: Create Nginx HTTP configuration
      copy:
        content: |
          server {
              listen 80;
              listen [::]:80;
              server_name portalrevalida.com www.portalrevalida.com;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              
              # Cloudflare Real IP
              set_real_ip_from 173.245.48.0/20;
              set_real_ip_from 103.21.244.0/22;
              set_real_ip_from 103.22.200.0/22;
              set_real_ip_from 103.31.4.0/22;
              set_real_ip_from 141.101.64.0/18;
              set_real_ip_from 108.162.192.0/18;
              set_real_ip_from 190.93.240.0/20;
              set_real_ip_from 188.114.96.0/20;
              set_real_ip_from 197.234.240.0/22;
              set_real_ip_from 198.41.128.0/17;
              set_real_ip_from 162.158.0.0/15;
              set_real_ip_from 104.16.0.0/13;
              set_real_ip_from 104.24.0.0/14;
              set_real_ip_from 172.64.0.0/13;
              set_real_ip_from 131.0.72.0/22;
              real_ip_header CF-Connecting-IP;

              # Proxy para Next.js
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;

                  # Timeouts
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;

                  # Max body size
                  client_max_body_size 50M;
              }
          }
        dest: /etc/nginx/sites-available/portalrevalida.com
        owner: root
        group: root
        mode: '0644'

    - name: Create Nginx HTTPS configuration
      copy:
        content: |
          server {
              listen 443 ssl http2;
              listen [::]:443 ssl http2;
              server_name portalrevalida.com www.portalrevalida.com;
              
              # SSL Configuration
              ssl_certificate /etc/nginx/ssl/portalrevalida.com.crt;
              ssl_certificate_key /etc/nginx/ssl/portalrevalida.com.key;
              
              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              
              # Cloudflare Real IP
              set_real_ip_from 173.245.48.0/20;
              set_real_ip_from 103.21.244.0/22;
              set_real_ip_from 103.22.200.0/22;
              set_real_ip_from 103.31.4.0/22;
              set_real_ip_from 141.101.64.0/18;
              set_real_ip_from 108.162.192.0/18;
              set_real_ip_from 190.93.240.0/20;
              set_real_ip_from 188.114.96.0/20;
              set_real_ip_from 197.234.240.0/22;
              set_real_ip_from 198.41.128.0/17;
              set_real_ip_from 162.158.0.0/15;
              set_real_ip_from 104.16.0.0/13;
              set_real_ip_from 104.24.0.0/14;
              set_real_ip_from 172.64.0.0/13;
              set_real_ip_from 131.0.72.0/22;
              real_ip_header CF-Connecting-IP;

              # Proxy para Next.js
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;

                  # Timeouts
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;

                  # Buffer settings
                  proxy_buffering off;
                  proxy_buffer_size 4k;
                  proxy_buffers 8 4k;
                  proxy_busy_buffers_size 8k;

                  # Max body size
                  client_max_body_size 50M;
              }
          }
        dest: /etc/nginx/sites-available/portalrevalida.com-ssl
        owner: root
        group: root
        mode: '0644'

    - name: Enable HTTP site configuration
      file:
        src: /etc/nginx/sites-available/portalrevalida.com
        dest: /etc/nginx/sites-enabled/portalrevalida.com
        state: link

    - name: Enable HTTPS site configuration
      file:
        src: /etc/nginx/sites-available/portalrevalida.com-ssl
        dest: /etc/nginx/sites-enabled/portalrevalida.com-ssl
        state: link

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Reload Nginx with SSL configuration
      systemd:
        name: nginx
        state: reloaded
        enabled: yes

    - name: Install AWS CLI if not present
      shell: |
        if ! command -v aws &> /dev/null; then
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install
          rm -rf aws awscliv2.zip
        fi
      args:
        executable: /bin/bash

    - name: Install jq for JSON parsing
      apt:
        name: jq
        state: present
        update_cache: yes

    - name: Retrieve API keys from Secrets Manager
      shell: |
        aws secretsmanager get-secret-value \
          --secret-id revalida-app-api-keys \
          --region {{ aws_region }} \
          --query 'SecretString' \
          --output text
      register: app_secrets
      become_user: ubuntu
      no_log: true  # Não logar secrets

    - name: Parse secrets
      set_fact:
        parsed_secrets: "{{ app_secrets.stdout | from_json }}"
      no_log: true

    - name: Download and install CloudWatch Agent
      shell: |
        if ! [ -f /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl ]; then
          wget -q https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
          rm amazon-cloudwatch-agent.deb
        fi
      args:
        executable: /bin/bash

    - name: Configure CloudWatch Agent from SSM Parameter Store
      shell: |
        sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -s \
          -c ssm:/cloudwatch/config/ec2
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Start CloudWatch Agent
      systemd:
        name: amazon-cloudwatch-agent
        state: started
        enabled: yes
      ignore_errors: yes

    - name: Sync public directory to S3
      shell: |
        # Sync public directory (images, fonts, etc) to S3
        aws s3 sync {{ app_dir }}/public/ s3://{{ s3_bucket_name }}/public/ \
          --region {{ aws_region }} \
          --delete \
          --exclude ".git/*" \
          --exclude "*.md" \
          --cache-control "public, max-age=86400" \
          --metadata-directive REPLACE
      environment:
        AWS_REGION: "{{ aws_region }}"
      become_user: ubuntu
      register: s3_sync_result

    - name: Debug S3 sync result
      debug:
        msg: "S3 sync completed. Public assets synchronized to s3://{{ s3_bucket_name }}/public/"

    - name: Start frontend in PM2
      shell: |
        pm2 start npm --name frontend -- start -- -p 3000 -H 0.0.0.0
        pm2 save
      args:
        chdir: '{{ app_dir }}'
      become_user: ubuntu

    - name: Setup PM2 startup at boot
      shell: |
        pm2 startup systemd -u ubuntu --hp /home/ubuntu
        pm2 save
      args:
        executable: /bin/bash
      become_user: ubuntu
